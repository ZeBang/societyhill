trace <- function(A){
  return(sum(diag(A)))
}

rearrange=function(A,n1){
  n2=dim(A)[1]/n1
  B=array(0,c(n2^2,n1^2))
  for (j in 1:(n1^2)){
    c=(j-1)%/%n1
    r=(j-1)%%n1
    B[,j]=c(A[(r*n2)+1:n2,(c*n2)+1:n2])
  }
  return(B)
}

tensor.rearrange=function(A,n1,n2){
  n3=dim(A)[1]/(n1*n2)
  ten=array(0,c(n1^2,n2^2,n3^2))
  B=rearrange(A,n1*n2)
  for (i in 1:(n3^2)){
    temp=B[i,]
    temp=matrix(temp,nrow=(n1*n2))
    temp=rearrange(temp,n1)
    temp=t(temp)
    ten[,,i]=temp
  }
  return(ten)
}

kron.inn.prod=function(A,B){
  C=array(0,dim(A)/dim(B))
  r.C=dim(C)[1]
  c.C=dim(C)[2]
  r.B=dim(B)[1]
  c.B=dim(B)[2]
  for (i in 1:r.C){
    for (j in 1:c.C){
      C[i,j]=sum(B*A[(i-1)*r.B+1:r.B, (j-1)*c.B+1:c.B])
    }
  }
  return(C)
}

n1=2
n2=2
n3=2
n=n1*n2*n3
Q=matrix(rnorm(n^2),nrow=n)
Q=svd(Q)
## Sigma=Q$u%*%diag(1+1*runif(n))%*%t(Q$v)
Sigma=Q$u%*%diag(1+10*runif(n))%*%t(Q$u)

Sigma.ten=tensor.rearrange(Sigma,n1,n2)
Sigma.ten=as.tensor(Sigma.ten)
aaa=cp(Sigma.ten,num_components=1)
s.cp=aaa$lambda[1]^2*sum(aaa$U[[1]]^2)*sum(aaa$U[[2]]^2)*sum(aaa$U[[3]]^2)
s.cp=sqrt(s.cp)
Sigma.ten.1=array(0,c(n1^2,n2^2,n3^2))
for (i in 1:(n1^2)){
    for (j in 1:(n2^2)){
      for (k in 1:(n3^2)){
        Sigma.ten.1[i,j,k]=aaa$U[[1]][i]*aaa$U[[2]][j]*aaa$U[[3]][k]
      }
    }
  }
Sigma.ten.1=Sigma.ten.1*aaa$lambda[1]
Sigma.ten=tensor.rearrange(Sigma,n1,n2)
A.cp=matrix(c(aaa$U[[3]]),nrow=n3)
A.cp=A.cp/sqrt(sum(A.cp^2))
B.cp=kron.inn.prod(Sigma, A.cp)
RB.cp <- rearrange(B.cp,n1)

A <- matrix(rnorm(n3^2), ncol=n3)
A <- A/sqrt(sum(A^2))
B <- kron.inn.prod(Sigma, A)
RB <- rearrange(B,n1)

Rsigma = rearrange(Sigma,n1*n2)

U = svd(Rsigma)$u
V = svd(Rsigma)$v
D = svd(Rsigma)$d

r <- length(D)

sig = matrix(0, ncol=n1*n2*n3, nrow=n1*n2*n3)
for (i in c(1:r)){
  sig = sig + D[i] * kronecker(matrix(V[,i], ncol=n1*n2), matrix(U[,i], ncol=n3))
}
sum((sig - Sigma)^2)

A.sym = A + t(A)
A.sym = A.sym/sqrt(sum(A.sym^2))
B.sym <- kron.inn.prod(Sigma, A.sym)
RB.sym <- rearrange(B.sym,n1)

A.skew = A - t(A)
A.skew = A.skew/sqrt(sum(A.skew^2))
B.skew <- kron.inn.prod(Sigma, A.skew)
RB.skew <- rearrange(B.skew,n1)

stopifnot(max(svd(RB.sym)$d[1], svd(RB.skew)$d[1]) >= svd(RB)$d[1])


###########################################

A30 = svd(rearrange(Sigma,n1*n2))$u[,1]
A30 = matrix(A30,nrow=n3)
B0 = kron.inn.prod(Sigma,A30)
bbb = svd(rearrange(B0,n1))
A20 = bbb$u[,1]
A20 = matrix(A20,nrow=n2)
A10 = bbb$v[,1]
A10 = matrix(A10,nrow=n1)
Sigma.1 = kronecker(kronecker(A10,A20),A30)*bbb$d[1]
s0 = bbb$d[1]
sum((Sigma.ten-Sigma.ten.1)^2)
sum((Sigma-Sigma.1)^2)
c(s.cp^2, s0^2)

A3.cp=matrix(c(aaa$U[[3]]),nrow=n3)
A3.cp=A3.cp/sqrt(sum(A3.cp^2))
sum((A30-A3.cp)^2)
sum((kron.inn.prod(Sigma,A3.cp))^2)
sum((kron.inn.prod(Sigma,A30))^2)

A3.cp.sym= A3.cp + t(A3.cp)
A3.cp.sym=A3.cp.sym/sqrt(sum((A3.cp.sym)^2))
ccc=kron.inn.prod(Sigma,A3.cp.sym)
ccc=rearrange(ccc,n1)
s.cp.sym=svd(ccc)$d[1]
print(c(s0, s.cp, s.cp.sym), digits=15)
stopifnot(s.cp <= s.cp.sym)


####

n1=4
n2=4
n3=4
n=n1*n2*n3
Q=matrix(rnorm(n^2),nrow=n)
Q=svd(Q)
## Sigma=Q$u%*%diag(1+1*runif(n))%*%t(Q$v)
Sigma=Q$u%*%diag(1+10*runif(n))%*%t(Q$u)

Sigma.ten=tensor.rearrange(Sigma,n1,n2)
Sigma.ten=as.tensor(Sigma.ten)
aaa=cp(Sigma.ten,num_components=1)
s.cp=aaa$lambda[1]^2*sum(aaa$U[[1]]^2)*sum(aaa$U[[2]]^2)*sum(aaa$U[[3]]^2)
s.cp=sqrt(s.cp)
Sigma.ten.1=array(0,c(n1^2,n2^2,n3^2))
for (i in 1:(n1^2)){
  for (j in 1:(n2^2)){
    for (k in 1:(n3^2)){
      Sigma.ten.1[i,j,k]=aaa$U[[1]][i]*aaa$U[[2]][j]*aaa$U[[3]][k]
    }
  }
}
Sigma.ten.1=Sigma.ten.1*aaa$lambda[1]
Sigma.ten=tensor.rearrange(Sigma,n1,n2)

for (i in c(1:100000)){


  A <- matrix(rnorm(n3^2), ncol=n3)
  A <- A/sqrt(sum(A^2))

  A.sym1 = (A + t(A)) ; c = sqrt(sum((A.sym1)^2))
  A.sym1 = A.sym1/sqrt(sum((A.sym1)^2))

  A.sym2 = (A %*% t(A)) ; c2 = sqrt(sum((A.sym2)^2))
  A.sym2 = A.sym2/sqrt(sum((A.sym2)^2))

  # A.sym3 = (A.sym2 + t(A.sym2)) ; c3 = sqrt(sum((A.sym3)^2))
  # A.sym3 = A.sym3/sqrt(sum((A.sym3)^2))
  #
  # A.sym4 = (A.sym3 + t(A.sym3)) ; c4 = sqrt(sum((A.sym4)^2))
  # A.sym4 = A.sym4/sqrt(sum((A.sym4)^2))

  B <- kron.inn.prod(Sigma, A)
  RB <- rearrange(B,n1)

  B1 = kron.inn.prod(Sigma, A.sym1)
  RB1 = rearrange(B1, n1)

  B2 = kron.inn.prod(Sigma, A.sym2)
  RB2 = rearrange(B2, n1)

  # B3 = kron.inn.prod(Sigma, A.sym3)
  # RB3 = rearrange(B3, n1)
  #
  # B4 = kron.inn.prod(Sigma, A.sym4)
  # RB4 = rearrange(B4, n1)

  stopifnot(max(c(svd(RB1)$d[1], svd(RB2)$d[1])) >= svd(RB)$d[1] )


  #RB00 <- (rearrange(B,n1) + rearrange(t(B),n1))/c

  #sum((RB0 - RB00)^2)
  #stopifnot(svd(rearrange(B,n1) + rearrange(t(B),n1))$d[1] / svd(rearrange(B,n1))$d[1] >= c)
}


svd(RB)$d[1]
svd(RB1)$d[1]
svd(RB2)$d[1]








B=array(0,c(n1*n2,n1*n2))
for (i in 1:(n1*n2)){
for (j in 1:(n1*n2)){
B[i,j]=sum(t(A3)*Sigma[((i-1)*n3)+1:n3,((j-1)*n3)+1:n3])
}
}
B1=B+t(B)







## A3=matrix(rnorm(n3^2),nrow=n3)
A3=matrix(c(aaa$U[[3]]),nrow=n3)
A3=A3/sqrt(sum(A3^2))
B=array(0,c(n1*n2,n1*n2))
for (i in 1:(n1*n2)){
for (j in 1:(n1*n2)){
B[i,j]=sum(t(A3)*Sigma[((i-1)*n3)+1:n3,((j-1)*n3)+1:n3])
}
}
B1=B+t(B)
B2=B-t(B)
s1=svd(rearrange(B1,n1))$d[1]
s2=svd(rearrange(B2,n1))$d[1]
s=svd(rearrange(B,n1))$d[1]
4*s^2
s1^2+s2^2
c(s00^2,s0^2,s^2/sum(A3^2),
s1^2/sum((A3+t(A3))^2),
s2^2/sum((A3-t(A3))^2))


