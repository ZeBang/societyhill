R = 3
dim = c(4,4,2)
A = generateA(dim, R)



a11 = as.vector(A[[1]][[1]])
a12 = as.vector(A[[1]][[2]])
a13 = as.vector(A[[1]][[3]])
a21 = as.vector(A[[2]][[1]])
a22 = as.vector(A[[2]][[2]])
a23 = as.vector(A[[2]][[3]])
a31 = as.vector(A[[3]][[1]])
a32 = as.vector(A[[3]][[2]])
a33 = as.vector(A[[3]][[3]])

phi <- Reduce("+", lapply(1:R, function(j) {kronecker_list(rev(A[[j]]))}))

tt <- trearrange(phi,rev(dim))
tt <- as.tensor(aperm(tt@data))
tt.should = a11 %o% a12 %o% a13 + a21 %o% a22 %o% a23 + a31 %o% a32 %o% a33

sum(tt.should-tt@data)

fro.order <- function(A){
  A.norm <- c()
  for (j in c(1:R)){
    A.norm[j] <- norm(A[[j]][[1]], 'f') * norm(A[[j]][[2]], 'f') * norm(A[[j]][[3]], 'f')
  }
  order.norm <- order(A.norm, decreasing=TRUE)
  A.temp <- A
  for (j in c(1:R)){
    A[[j]] <- A.temp[[order.norm[j]]]
  }
  return(A)
}

ten.proj <- function(tt, dim, R){
  cpd <- rTensor::cp(tt, num_components = R)
  lam <- cpd$lambdas
  A.proj <- list()
  for (j in c(1:R)){
    u1 <- cpd$U[[1]][,j]
    u2 <- cpd$U[[2]][,j]
    u3 <- cpd$U[[3]][,j]
    f1 <- sqrt(sum(cpd$U[[1]][,j]^2))
    f2 <- sqrt(sum(cpd$U[[2]][,j]^2))
    f3 <- sqrt(sum(cpd$U[[3]][,j]^2))

    a1 <- u1/f1
    a2 <- u2/f2
    a3 <- u3*f1*f2*lam[j]
    A.proj[[j]] <- list(matrix(a1,dim[1],dim[1]),
                        matrix(a2,dim[2],dim[2]),
                        matrix(a3,dim[3],dim[3]))
  }
  return(fro.order(A.proj))
}


A.proj = ten.proj(tt, dim, R)

A.proj[[2]][[3]]
A[[2]][[3]]

phi.proj <- Reduce("+", lapply(1:R, function(j) {kronecker_list(rev(A.proj[[j]]))}))
sum(phi.proj - phi)


#####
A.init[[1]][[1]] =  A.proj[[1]][[1]]
A.init[[1]][[2]] = -A.proj[[1]][[2]]
A.init[[1]][[3]] = -A.proj[[1]][[3]]

A.init[[2]][[1]] =  A.proj[[2]][[1]]
A.init[[2]][[2]] = -A.proj[[2]][[2]]
A.init[[2]][[3]] = -A.proj[[2]][[3]]

sum((TL2$res)^2)/(T-1)
sum((TL1$res)^2)/(T-1)

R =1
AA.init = list()
A.proj = TAR2.projection(xxrft.nm,r=R)$A
n = 1
for (x in c(-1,1)){
  for (y in c(-1,1)){
    for (z in c(-1,1)){
      if (sum(c(x,y,z) == -1) %% 2 == 0){
        A.init.temp = A.proj
        A.init.temp[[1]][[1]] = x*A.proj[[1]][[1]]
        A.init.temp[[1]][[2]] = y*A.proj[[1]][[2]]
        A.init.temp[[1]][[3]] = z*A.proj[[1]][[3]]
        AA.init[[n]] = A.init.temp
        print(c(x,y,x))
        print(paste(n, "-------------"))
        n = n + 1
      }
    }
  }
}

TL1 = c()
for (i in c(1:4)){
  est <- TAR2.LS(xxrft.nm, r=1, init=AA.init[[i]], niter=400, print.true = TRUE)
  TL1 <- c(TL1, (sum((est$res)^2)/(T-1)))
}
TL1
est <- TAR2.LS(xxrft.nm, r=1, init=A.init.diag, niter=400, print.true = TRUE)

R = 3
AA.init = list()
n = 1
A.proj = TAR2.projection(xxrft.nm,r=R)$A

for (i in c(-1,1)){
  for (j in c(-1,1)){
    for (k in c(-1,1)){
      if (sum(c(i,j,k) == -1) %% 2 == 0){

        A.init.temp = A.proj
        A.init.temp[[1]][[1]] = i*A.proj[[1]][[1]]
        A.init.temp[[1]][[2]] = j*A.proj[[1]][[2]]
        A.init.temp[[1]][[3]] = k*A.proj[[1]][[3]]

        for (x in c(-1,1)){
          for (y in c(-1,1)){
            for (z in c(-1,1)){
              if (sum(c(x,y,z) == -1) %% 2 == 0){
                A.init.temp[[2]][[1]] = x*A.proj[[2]][[1]]
                A.init.temp[[2]][[2]] = y*A.proj[[2]][[2]]
                A.init.temp[[2]][[3]] = z*A.proj[[2]][[3]]
                AA.init[[n]] = A.init.temp

                print(c(i,j,k))
                print(c(x,y,x))
                print(paste(n, "-------------"))
                n = n + 1
              }
            }
          }
        }


        }
      }
    }
}

TL2 = c()
for (i in c(1:16)){
  est <- TAR2.LS(xxrft.nm, r=R, init=AA.init[[i]], niter=200, print.true = TRUE)
  TL2 <- c(TL2, (sum((est$res)^2)/(T-1)))
}
TL2
#####

# =================================================
# niter = 500 |         |    LSE  |         |         |   MLE   |         |
# tol = 1e-6  |   diag  |   rand  |   proj  |   diag  |   rand  |   proj  |
# R = 1       | 1077.31 | 1077.31 | 1077.31 | 1078.25 | 1078.25 | 1078.25 |
# R = 2       | 1066.06 | 1084.04 | 1064.38 | 0000.00 | 0000.00 | 0000.00 |
# R = 3       | 1077.31 | 1077.31 | 1077.31 | 0000.00 | 0000.00 | 0000.00 |



P = 1
K = 3
R = 3
n = 300
to = 1e-6
print = TRUE
xx = xxt.nm

A.init.diag = lapply(1:R, function(j) {lapply(1:K, function(i) {diag(dim[i])})})
A.init.rand1 = lapply(1:R, function(j) {lapply(1:K, function(i) {matrix(rnorm(dim[i]^2), c(dim[i],dim[i]))})})
A.init.rand2 = lapply(1:R, function(j) {lapply(1:K, function(i) {matrix(rnorm(dim[i]^2), c(dim[i],dim[i]))})})
A.init.proj = TenAR.proj(xx,R,P)$A[[1]]
# A.proj = TAR2.projection(xx, R)$A

est.diag <- TAR2.LS(xx, r=R, init=A.init.diag, niter=n, tol=to, print.true = print)
est.rand1 <- TAR2.LS(xx, r=R, init=A.init.rand1, niter=n, tol=to, print.true = print)
est.rand2 <- TAR2.LS(xx, r=R, init=A.init.rand2, niter=n, tol=to, print.true = print)
est.proj <- TAR2.LS(xx, r=R, init=A.init.proj, niter=n, tol=to, print.true = print)
(sum((est.diag$res)^2)/(T-1))
(sum((est.rand1$res)^2)/(T-1))
(sum((est.rand2$res)^2)/(T-1))
(sum((est.proj$res)^2)/(T-1))

tt <- trearrange(est.proj$Sig, dim)
sig.proj <- fro.rescale(ten.proj(tt, dim, 1))[[1]]

est.diag <- TAR2.MLE(xx, r=R, init.A=A.init.diag, niter=n, tol=to, print.true = print)
est.rand1 <- TAR2.MLE(xx, r=R, init.A=A.init.rand1, niter=n, tol=to, print.true = print)
est.rand2 <- TAR2.MLE(xx, r=R, init.A=A.init.rand2, niter=n, tol=to, print.true = print)
est.proj <- TAR2.MLE(xx, r=R, init.A=A.init.proj, init.sig=NULL, niter=n, tol=to, print.true = print)
(sum((est.diag$res)^2)/(T-1))
(sum((est.rand1$res)^2)/(T-1))
(sum((est.rand2$res)^2)/(T-1))
(sum((est.proj$res)^2)/(T-1))


#####
## check ans1
x <- xxrft.nm[1:(t-1),,,]
ans2 <- 0
for (i in c(1:(t-1))){
  for (j in c(1:R)){
    ans2 = ans2 + ttm(ttm(ttm(x[i,,,], A[[j]][[1]], 1), A[[j]][[2]], 2), A[[j]][[3]], 3)
  }
  x[i,,,] <- ans2
  ans2 <- 0
}

ans1 <- Reduce("+",lapply(1:R, function(j) {(rTensor::ttl(xxrft.nm[1:(t-1),,,], A[[j]], (c(1:3) + 1)))}))

identical(ans1@data, x@data)

#####
## check RR
k = 1
RR <- tensor(temp,temp,c(1:4)[-(k+1)],c(1:4)[-(k+1)])
ans <- 0
for (i in c(1:(t-1))){
  te <- as.tensor(temp[i,,,,drop=TRUE])
  tm <- k_unfold(te, 1)
  ans = ans + tm@data %*% t(tm@data)
}
sum(RR - ans)

#####
## check lm
x = array(rnorm(1000), c(10,100))
B <- matrix(rnorm(100),c(10,10))
y = B %*% x
coef = t(solve(x %*% t(x)) %*% x %*% t(y))
sum(coef^2 - B^2)

#####
## check TenAR.A
dim = c(4,5,2)
R = 5
P = 3
rho = 0.876
A <- TenAR.A(dim,R,P,rho)

for (p in c(1:P)){
  phi <-  Reduce("+", lapply(1:R, function(j) {rTensor::kronecker_list(rev(A[[p]][[j]]))}))
  eigen = max(Mod(eigen(phi,only.values = TRUE)$values))
  print(eigen)
}

#####
## check TenAR.xx
xx <- TenAR.xx(t=1000, A, setting="iid")



## TenAR IID####
## TenAR setting = iid

R=2; P=1; setting="iid"; nsim=100
box <- lapply(1:3, function(rr){lapply(1:4, function(tt){list()})})
for (d in c(3,4,5)){
  set.seed(19951228)
  dim = c(d, d, d)
  rho = 0.5
  A <- TenAR.A(dim,R,P,rho)
  for (t in c(900, 1000, 2000, 5000)){
    test <- sim.I(dim,A, t = t, setting, R, P, nsim)
    box[[which(c(3,4,5) == d)]][[which(c(900, 1000, 2000, 5000) == t)]] <- list(test[1,], test[2,], test[3,], test[4,])
  }
}

R=2; P=1; setting="svd"; nsim=100
box2 <- lapply(1:3, function(rr){lapply(1:4, function(tt){list()})})
for (d in c(3,4,5)){
  set.seed(19951228)
  dim = c(d, d, d)
  Q <- randortho(prod(dim))
  D <- sqrt(abs(diag(rnorm(prod(dim)))))
  E <- Q %*% D
  rho = 0.5
  A <- TenAR.A(dim,R,P,rho)

  for (t in c(900, 1000, 2000, 5000)){
    test <- sim.I(dim,A, t = t, setting, R, P, nsim)
    box2[[which(c(3,4,5) == d)]][[which(c(900, 1000, 2000, 5000) == t)]] <- list(test[1,], test[2,], test[3,], test[4,])
  }
}

R=2; P=1; setting="mle"; nsim=100
box3 <- lapply(1:3, function(rr){lapply(1:4, function(tt){list()})})
for (d in c(3,4,5)){
  set.seed(1228)
  dim = c(d, d, d)
  Sig.true <- lapply(1:3, function(i){
    Q <- randortho(dim[i])
    D <- abs(diag(rnorm(dim[i])))
    Q %*% D %*% t(Q)
  })
  Sig.true <- fro.rescale(list(Sig.true))[[1]]
  Sig.true.sqrt <- lapply(1:3, function(i){
    sqrtm(Sig.true[[i]])$B
  })

  rho = 0.5
  A <- TenAR.A(dim,R,P,rho)
  for (t in c(900, 1000, 2000, 5000)){
    test <- sim.I(dim,A, t = t, setting, R, P, nsim, Sig.true.sqrt=Sig.true.sqrt)
    box3[[which(c(3,4,5) == d)]][[which(c(900, 1000, 2000, 5000) == t)]] <- list(test[1,], test[2,], test[3,], test[4,])
  }
}

# box plot 8.7 x 6 inches portrait
par(mar=c(5, 4, 4, 2) -1.5,mfrow=c(3,4),las="2")
boxplot(box[[1]][[1]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 3, ',' ,T,'=',500,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box[[1]][[2]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 3, ',' ,T,'=',800,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box[[1]][[3]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 3, ',' ,T,'=',1000,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box[[1]][[4]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 3, ',' ,T,'=',5000,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))

boxplot(box[[2]][[1]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 4, ',' ,T,'=',500,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box[[2]][[2]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 4, ',' ,T,'=',800,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box[[2]][[3]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 4, ',' ,T,'=',1000,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box[[2]][[4]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 4, ',' ,T,'=',5000,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))

boxplot(box[[3]][[1]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 5, ',' ,T,'=',500,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box[[3]][[2]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 5, ',' ,T,'=',800,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box[[3]][[3]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 5, ',' ,T,'=',1000,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box[[3]][[4]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 5, ',' ,T,'=',5000,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))

# box plot 8.7 x 6 inches portrait
par(mar=c(5, 4, 4, 2) -1.5,mfrow=c(3,4),las="2")
boxplot(box2[[1]][[1]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 3, ',' ,T,'=',500,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box2[[1]][[2]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 3, ',' ,T,'=',800,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box2[[1]][[3]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 3, ',' ,T,'=',1000,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box2[[1]][[4]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 3, ',' ,T,'=',5000,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))

boxplot(box2[[2]][[1]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 4, ',' ,T,'=',500,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box2[[2]][[2]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 4, ',' ,T,'=',800,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box2[[2]][[3]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 4, ',' ,T,'=',1000,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box2[[2]][[4]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 4, ',' ,T,'=',5000,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))

boxplot(box2[[3]][[1]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 5, ',' ,T,'=',500,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box2[[3]][[2]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 5, ',' ,T,'=',800,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box2[[3]][[3]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 5, ',' ,T,'=',1000,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box2[[3]][[4]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 5, ',' ,T,'=',5000,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))

# box plot 8.7 x 6 inches portrait
par(mar=c(5, 4, 4, 2) -1.5,mfrow=c(3,4),las="2")
boxplot(box3[[1]][[1]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 3, ',' ,T,'=',500,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box3[[1]][[2]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 3, ',' ,T,'=',800,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box3[[1]][[3]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 3, ',' ,T,'=',1000,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box3[[1]][[4]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 3, ',' ,T,'=',5000,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))

boxplot(box3[[2]][[1]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 4, ',' ,T,'=',500,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box3[[2]][[2]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 4, ',' ,T,'=',800,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box3[[2]][[3]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 4, ',' ,T,'=',1000,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box3[[2]][[4]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 4, ',' ,T,'=',5000,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))

boxplot(box3[[3]][[1]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 5, ',' ,T,'=',500,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box3[[3]][[2]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 5, ',' ,T,'=',800,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box3[[3]][[3]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 5, ',' ,T,'=',1000,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))
boxplot(box3[[3]][[4]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 5, ',' ,T,'=',5000,',',R,'=',2, ',',p,'=',1)),names = c("VAR","PROJ","LSE2","MLE2"))


## TenAR SVD####
## TenAR setting = svd

R=2; P=1; setting="svd"; nsim=100

box <- lapply(1:3, function(rr){lapply(1:4, function(tt){list()})})
for (d in c(3,4,5)){
  for (t in c(300, 500, 800, 5000)){
    dim = c(d, d, d)
    Q <- randortho(prod(dim))
    D <- sqrt(abs(diag(rnorm(prod(dim)))))
    E <- Q %*% D
    rho = 0.5
    A <- TenAR.A(dim,R,P,rho)

    test <- sim.I(dim,A, t = t, setting, R, P, nsim)
    box[[which(c(3,4,5) == d)]][[which(c(300, 500, 800, 5000) == t)]] <- list(test[1,], test[2,], test[3,], test[4,], test[5,])
  }
}
# box plot 8.7 x 6 inches landscape
par(mar=c(5, 4, 4, 2) -1.5,mfrow=c(3,4),las="2")
boxplot(box[[1]][[1]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 3, ',' ,T,'=',300,', ',r,'=',2, ',',p,'=',1)),names = c("PROJ","LSE","MLE","VAR"))
boxplot(box[[1]][[2]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 3, ',' ,T,'=',500,', ',r,'=',2, ',',p,'=',1)),names = c("PROJ","LSE","MLE","VAR"))
boxplot(box[[1]][[3]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 3, ',' ,T,'=',800,', ',r,'=',2, ',',p,'=',1)),names = c("PROJ","LSE","MLE","VAR"))
boxplot(box[[1]][[4]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 3, ',' ,T,'=',5000,', ',r,'=',2, ',',p,'=',1)),names = c("PROJ","LSE","MLE","VAR"))

boxplot(box[[2]][[1]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 4, ',' ,T,'=',300,', ',r,'=',2, ',',p,'=',1)),names = c("PROJ","LSE","MLE","VAR"))
boxplot(box[[2]][[2]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 4, ',' ,T,'=',500,', ',r,'=',2, ',',p,'=',1)),names = c("PROJ","LSE","MLE","VAR"))
boxplot(box[[2]][[3]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 4, ',' ,T,'=',800,', ',r,'=',2, ',',p,'=',1)),names = c("PROJ","LSE","MLE","VAR"))
boxplot(box[[2]][[4]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 4, ',' ,T,'=',5000,', ',r,'=',2, ',',p,'=',1)),names = c("PROJ","LSE","MLE","VAR"))

boxplot(box[[3]][[1]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 5, ',' ,T,'=',300,', ',r,'=',2, ',',p,'=',1)),names = c("PROJ","LSE","MLE","VAR"))
boxplot(box[[3]][[2]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 5, ',' ,T,'=',500,', ',r,'=',2, ',',p,'=',1)),names = c("PROJ","LSE","MLE","VAR"))
boxplot(box[[3]][[3]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 5, ',' ,T,'=',800,', ',r,'=',2, ',',p,'=',1)),names = c("PROJ","LSE","MLE","VAR"))
boxplot(box[[3]][[4]], main=expression(paste(d[1], ',',d[2], ',',d[3],  '=', 5, ',' ,T,'=',5000,', ',r,'=',2, ',',p,'=',1)),names = c("PROJ","LSE","MLE","VAR"))


## init.A explore

K = 3
R = 3
n = 500

xx = xxt.nm

A.init.diag = lapply(1:R, function(j) {lapply(1:K, function(i) {diag(dim[i])})})
A.init.rand = lapply(1:R, function(j) {lapply(1:K, function(i) {matrix(rnorm(dim[i]^2), c(dim[i],dim[i]))})})
A.init.proj = TAR2.projection(xx, R)$A


est.diag <- TAR2.MLE(xx, r=R, init.A=A.init.diag, niter=n, print.true = TRUE)
est.ran <- TAR2.MLE(xx, r=R, init.A=A.init.rand, niter=n, print.true = TRUE)
est.proj <- TAR2.MLE(xx, r=R, init.A=A.init.proj, niter=n, print.true = TRUE)
(sum((est.diag$res)^2)/(T-1))
(sum((est.rand$res)^2)/(T-1))
(sum((est.proj$res)^2)/(T-1))


# Fama likelihood ####
nsim = 100
like <- array(0, c(3,3,nsim))
mse <- array(0, c(3,3,nsim))
iter <- array(0, c(3,3,nsim))
dis <- array(0, c(3,2,nsim))
K = 3
n = 500


xx = xxt.nm
for (R in c(1:3)){
  for (m in c(1:nsim)){

    A.init.diag = lapply(1:R, function(j) {lapply(1:K, function(i) {diag(dim[i])})})
    A.init.proj = TAR2.projection(xx, R)$A
    est.diag <- TAR2.MLE(xx, r=R, init.A=A.init.diag, niter=n, print.true = FALSE)
    est.proj <- TAR2.MLE(xx, r=R, init.A=A.init.proj, niter=n, print.true = FALSE)

    like.rand = c()
    mse.rand = c()
    iter.rand = c()
    dis.rand = c()
    for (i in c(1:10)){
      A.init.rand = lapply(1:R, function(j) {lapply(1:K, function(i) {matrix(rnorm(dim[i]^2), c(dim[i],dim[i]))})})
      est.rand <- TAR2.MLE(xx, r=R, init.A=A.init.rand, niter=n, print.true = FALSE)
      like.rand = c(like.rand, likelihood(xx, est.rand$A, est.rand$SIGMA))
      mse.rand = c(mse.rand, (sum((est.rand$res)^2)/(T-1)))
      iter.rand = c(iter.rand, est.rand$niter)
      dis.rand = c(dis.rand, ten.dis.A(list(est.rand$A), list(est.proj$A)))
      print(i)
    }
    like.rand <- max(like.rand)
    mse.rand <- min(mse.rand)
    iter.rand <- min(iter.rand)
    dis.rand <- min(dis.rand)

    like[R,,m] <- c(likelihood(xx, est.diag$A, est.diag$SIGMA), like.rand, likelihood(xx, est.proj$A, est.proj$SIGMA))
    mse[R,,m] <- c((sum((est.diag$res)^2)/(T-1)), mse.rand, (sum((est.proj$res)^2)/(T-1)))
    iter[R,,m] <- c(est.diag$niter, iter.rand, est.proj$niter)
    dis[R,,m] <- c(ten.dis.A(list(est.diag$A), list(est.proj$A)), dis.rand)
    print(paste("------, R,m=", R, m))
  }
}

# check likelihood increase
right = 0
index = 5
for (i in c(1:nsim)){
  if ((round(like[1, index, i]) <= round(like[2, index, i])) & (round(like[2, index, i]) <= round(like[3, index, i]))){right = right + 1}
}
right

# check proj is best
r = 3
index = 5
best = 0
for (i in c(1:nsim)){
  if (max(round(like[r,,i][1:5])) == round(like[r,index,i])){best = best + 1}
  else {print(i)}
}
best


# check dis
r = 3
same = 0
index = 1
for (i in c(1:nsim)){
  if (dis[r, index,i] <= 0.01){same = same + 1}
  else {print(i)}
}
same




# True A likelihood ####
P=1
set.seed(1228)
setting = "mle"

dim = c(5,5,5)
rho = 0.8

nsim = 100
n <- 500
like <- array(0, c(3,6,nsim))
mse <- array(0, c(3,5,nsim))
iter <- array(0, c(3,5,nsim))
dis <- array(0, c(3,5,nsim))
dis2 <- array(0, c(3,5,nsim))
K <- 3
T <- 1000
print = FALSE
tol = 1e-5
nonsymmetric <- 0

Sig.true <- lapply(1:3, function(i){
  Q <- randortho(dim[i])
  D <- abs(diag(rnorm(dim[i])))
  Q %*% D %*% t(Q)
})
Sig.true <- fro.rescale(list(Sig.true))[[1]]
Sig.true.sqrt <- lapply(1:3, function(i){
  sqrtm(Sig.true[[i]])$B
})



for (m in c(1:nsim)){
  A <- TenAR.A(dim,R=2,P=1,rho)
  AA <- A
  AA[[1]][[3]] <- lapply(1:K, function(i){0*diag(dim[i])})

  xx <- as.tensor(TenAR.xx(t=T, A, setting, Sig.true.sqrt))


  # for (i in c(1:K)){
  #   if (identical(round(t(Sig.proj[[i]]), digits=4), round(Sig.proj[[i]], digits=4)) == FALSE){
  #     nonsymmetric = nonsymmetric + 1
  #   }
  # }

  A.init.rand = list(lapply(1:3, function(j) {lapply(1:3, function(i) {matrix(rnorm(dim[i]^2), c(dim[i],dim[i]))})}))

  rr <- TAR1.VAR(xx)$res
  rr <- rr %*% t(rr)/(T-1)
  rt <- trearrange(rr, rev(dim))
  rt <- as.tensor(aperm(rt@data))
  Sig.proj <- ten.proj(rt, dim, R=1)[[1]]


  for (R in c(1:3)){

    A.init.diag = list(lapply(1:R, function(j) {lapply(1:K, function(i) {diag(dim[i])})}))
    # A.init.proj = TenAR.proj(xx, R, P=1)$A
    A.init.proj <- list(TAR2.projection(xx, R)$A)

    if (R == 1){
      A.init.true = list(A[[1]][1])
    } else if (R == 2) {
      A.init.true = A
    } else {
      A.init.true = list(list(A[[1]][[1]], A[[1]][[2]], lapply(1:K, function(i){0*diag(dim[i])})))
      A.init.true[[1]][[3]][[1]][1,1] <- 0.00001
      A.init.true[[1]][[3]][[2]][1,1] <- 0.00001
      A.init.true[[1]][[3]][[3]][1,1] <- 0.00001
    }

    est.diag <- TAR2.MLE(xx, R,  init.A=A.init.diag[[1]],             niter=n, tol=tol, print.true=print)
    est.rand <- TAR2.MLE(xx, R,  init.A=A.init.rand[[1]][1:R],        niter=n, tol=tol, print.true=print)
    est.proj <- TAR2.MLE(xx, R,  init.A=A.init.proj[[1]], init.sig=Sig.proj,  niter=n, tol=tol, print.true=print)
    est.true <- TAR2.MLE(xx, R,  init.A=A.init.true[[1]], init.sig=Sig.true,  niter=n, tol=tol, print.true=print)

    like.diag = likelihood(xx, est.diag$A, est.diag$SIGMA)
    mse.diag = sum((est.diag$res)^2)/(T-1)
    iter.diag = est.diag$niter
    dis.diag = ten.dis.phi(est.diag$A, est.true$A)
    dis2.diag = ten.dis.phi(est.diag$A, AA[[1]])

    like.rand = likelihood(xx, est.rand$A, est.rand$SIGMA)
    mse.rand = sum((est.rand$res)^2)/(T-1)
    iter.rand = est.rand$niter
    dis.rand = ten.dis.phi(est.rand$A, est.true$A)
    dis2.rand = ten.dis.phi(est.rand$A, AA[[1]])

    like.proj = likelihood(xx, est.proj$A, est.proj$SIGMA)
    mse.proj = sum((est.proj$res)^2)/(T-1)
    iter.proj = est.proj$niter
    dis.proj = ten.dis.phi(est.proj$A, est.true$A)
    dis2.proj = ten.dis.phi(est.proj$A, AA[[1]])

    like.true = likelihood(xx, est.true$A, est.true$SIGMA)
    mse.true = sum((est.true$res)^2)/(T-1)
    iter.true = est.true$niter
    dis.true = ten.dis.phi(est.true$A, est.true$A)
    dis2.true = ten.dis.phi(est.true$A, AA[[1]])

    like.many = like.true
    mse.many = mse.true
    iter.many = iter.true
    dis.many = dis.true
    dis2.many = dis2.true

    for (i in c(1:10)){
      A.eps <- list(lapply(1:R, function(j) {lapply(1:K, function(i) {A.init.proj[[1]][[j]][[i]]
        + matrix(rnorm(dim[i]^2, sd=sqrt(sum(A.init.proj[[1]][[j]][[i]]^2))/((dim[i])^2)), ncol=dim[i])})}))

      #sig.eps <- list(lapply(1:K, function(i) {Sig.proj[[i]]
      # + matrix(rnorm(dim[i]^2, sd=sqrt(sum(Sig.proj[[i]]^2))/((dim[i])^2)), ncol=dim[i])}))

      est.many <- TAR2.MLE(xx, R,  init.A=A.eps[[1]], init.sig=Sig.proj,  niter=n, tol=tol, print.true=print)

      like.many = max(like.many, likelihood(xx, est.many$A, est.many$SIGMA))
      mse.many = min(mse.many, (sum((est.many$res)^2)/(T-1)))
      iter.many = min(iter.many, est.many$niter)
      dis.many = min(dis.many, ten.dis.phi(est.many$A, est.true$A))
      dis2.many = min(dis2.many, ten.dis.phi(est.many$A, AA[[1]]))
      print(i)
    }

    like[R,,m] <- c(like.diag, like.rand, like.proj, like.many, like.true, likelihood(xx, A[[1]], Sig.true))
    mse[R,,m]  <- c(mse.diag,   mse.rand,  mse.proj,  mse.many,  mse.true)
    iter[R,,m] <- c(iter.diag, iter.rand, iter.proj, iter.many, iter.true)
    dis[R,,m]  <- c(dis.diag,   dis.rand,  dis.proj,  dis.many,  dis.true)
    dis2[R,,m] <- c(dis2.diag, dis2.rand, dis2.proj, dis2.many, dis2.true)
    print(paste("------, R,m=", R, m))

  }
  print(like[,,m])
}

likeratio <- array(0, c(3,5,nsim))
likeratio2 <- array(0, c(3,4,nsim))
for (m in c(1:100)){
  likeratio[,,m] <- ((-like[,6,m] + like[,,m]))[,1:5]
  likeratio2[,,m]<- ((-like[,5,m] + like[,,m]))[,c(1,2,3,4)]
}

box1 <- list(likeratio[1,1,], likeratio[1,3,], likeratio[1,4,], likeratio[1,5,])
box2 <- list(likeratio[2,1,], likeratio[2,3,], likeratio[2,4,], likeratio[2,5,])
box3 <- list(likeratio[3,1,], likeratio[3,3,], likeratio[3,4,], likeratio[3,5,])

dox1 <- list(likeratio2[1,1,], likeratio2[1,2,], likeratio2[1,3,], likeratio2[1,4,])
dox2 <- list(likeratio2[2,1,], likeratio2[2,2,], likeratio2[2,3,], likeratio2[2,4,])
dox3 <- list(likeratio2[3,1,], likeratio2[3,2,], likeratio2[3,3,], likeratio2[3,4,])

# export size 8.7 x 3.5
par(mfrow=c(1,3),las="2")
boxplot(box1, main=expression(paste('log-likelihood Ratio, ', R, '=', 1)), names = c("DIAG","RAND", "PROJ","PROJ-10","TRUE"), ylim=c(-160000,0))
boxplot(box2, main=expression(paste('log-likelihood Ratio, ', R, '=', 2)), names = c("DIAG","RAND", "PROJ","PROJ-10","TRUE"), ylim=c(100,300))
boxplot(box3, main=expression(paste('log-likelihood Ratio, ', R, '=', 3)), names = c("DIAG","RAND", "PROJ","PROJ-10","TRUE"))

par(mfrow=c(1,3),las="2")
boxplot(box1, main=expression(paste('Log Likelihood Ratio, ', R, '=', 1)), names = c("DIAG", "PROJ","PROJ-10","TRUE"), ylim=c(-160000,0))
boxplot(box2, main=expression(paste('Log Likelihood Ratio, ', R, '=', 2)), names = c("DIAG", "PROJ","PROJ-10","TRUE"), ylim=c(130,260))
boxplot(box3, main=expression(paste('Log Likelihood Ratio, ', R, '=', 3)), names = c("DIAG", "PROJ","PROJ-10","TRUE"), ylim=c(250,500))

par(mfrow=c(1,3),las="2")
boxplot(dox1, main=expression(paste('log-likelihood ratio, ', R, '=', 1)), names = c("DIAG","RAND","PROJ","m-PROJ"))
boxplot(dox2, main=expression(paste('log-likelihood ratio, ', R, '=', 2)), names = c("DIAG","RAND","PROJ","m-PROJ"))
boxplot(dox3, main=expression(paste('log-likelihood ratio, ', R, '=', 3)), names = c("DIAG","RAND","PROJ","m-PROJ"))

box1 <- list(likeratio[1,1,],  likeratio[1,3,], likeratio[1,4,], likeratio[1,5,])
box2 <- list(likeratio[2,1,],  likeratio[2,3,], likeratio[2,4,], likeratio[2,5,])
box3 <- list(likeratio[3,1,],  likeratio[3,3,], likeratio[3,4,], likeratio[3,5,])

dox1 <- list(likeratio2[1,1,], likeratio2[1,3,], likeratio2[1,4,])
dox2 <- list(likeratio2[2,1,], likeratio2[2,3,], likeratio2[2,4,])
dox3 <- list(likeratio2[3,1,], likeratio2[3,3,], likeratio2[3,4,])

par(mfrow=c(1,3),las="2")
boxplot(box1, main=expression(paste('log-likelihood rario, ', R, '=', 1)), names = c("DIAG","PROJ","m-PROJ","TRUE"))
boxplot(box2, main=expression(paste('log-likelihood rario, ', R, '=', 2)), names = c("DIAG","PROJ","m-PROJ","TRUE"))
boxplot(box3, main=expression(paste('log-likelihood rario, ', R, '=', 3)), names = c("DIAG","PROJ","m-PROJ","TRUE"))

par(mfrow=c(1,3),las="2")
boxplot(dox1, main=expression(paste('log-likelihood rario, ', R, '=', 1)), names = c("DIAG","PROJ","m-PROJ"))
boxplot(dox2, main=expression(paste('log-likelihood rario, ', R, '=', 2)), names = c("DIAG","PROJ","m-PROJ"))
boxplot(dox3, main=expression(paste('log-likelihood rario, ', R, '=', 3)), names = c("DIAG","PROJ","m-PROJ"))




# Fama terms ####
xx <- xxt.nm
T <- xx@modes[1]
dim <- xx@modes[-1]
nic <- 2 # types of IC
rmax <- 5
ans <- array(0, c(nic,rmax))

for (r in c(1:rmax)){
  est <- TenAR.LS(xx,r,P=1,niter = 500, print.true = TRUE)
  res <- est$res
  for (q in c(1,2)){
    ans[q,r] <- IC(xx,res,q,r,T, dim)
    print(paste("======complete",q,r))
  }
}
apply(ans,1,which.min)

# Terms experiment ####
set.seed(1228)
setting = "mle"; rho = 0.5
R = 2; d <- 5
dim <- c(d,d,d)
N <- prod(dim)
nt <- 3
nic <- 2
result <- array(0,c(nt,nic)) # c(#of T, #of IC)
colnames(result) <- c("IC1", "IC2")
rownames(result) <- c("T=200", "T=500", "T=1000")

nsim <- 100
rmax <- 5   # max number of terms

T.iter = c(200,500,1000)
for (k in c(1:length(T.iter))){
  t <- T.iter[k]
  result.temp <- array(0,c(nsim, nic))
  ans <- array(0, c(nic,rmax))
  for (i in c(1:nsim)){
    A <- TenAR.A(dim,R,P=1,rho)
    Sigma.true <- lapply(1:3, function(i){
      Q <- randortho(dim[1])
      D <- sqrt(abs(diag(rnorm(dim[1]))))
      Q <- D %*% t(Q)
    })
    xx <- as.tensor(TenAR.xx(t, A, setting))

    for (r in c(1:rmax)){
      est <- TenAR.LS(xx, r, P=1, niter = 500, print.true = TRUE)
      res <- est$res
      for (q in c(1:nic)){
        ans[q,r] <- IC(xx,res,q,r,t,dim)
      }
    }
    print(paste("======complete, nsim=",i, ", t=",t,", R=",R))
    print(ans)
    print(paste((ans[1,R-1] - ans[1,R]), (ans[1,R] - ans[1,R+1])))
    print((ans[1,R-1] - ans[1,R]) > (ans[1,R] - ans[1,R+1]))
    result.temp[i,] <- (apply(ans,1,which.min) == R)
    print(result.temp[i,])
  }
  result[k,] <- apply(result.temp, 2, sum)
}
