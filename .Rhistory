sig = matrix(0,ncol=n1*n2*n3,nrow=n1*n2*n3)
for (i in c(1:n3^2)){
sig = sig + S[i] * kronecker(matrix(V[,i], ncol=n1*n2), matrix(U[,i], ncol=n3))
}
sum((Sigma - sig)^2)
Btest = matrix(0,ncol=n3^2,nrow=n3^2)
for (i in c(1:n3^2)){
Btest = Btest + S[i] * sum(diag(matrix(U[,i], ncol=n3)%*%t(A))) * matrix(V[,i], ncol=n1*n2)
}
sum((B - Btest)^2)
n1=5
n2=5
n3=5
n=n1*n2*n3
Q=matrix(rnorm(n^2),nrow=n)
Q=svd(Q)
## Sigma=Q$u%*%diag(1+1*runif(n))%*%t(Q$v)
Sigma=Q$u%*%diag(1+10*runif(n))%*%t(Q$u)
Rsigma = rearrange(Sigma,n1*n2)
A <- matrix(rnorm(n3^2), ncol=n3)
A <- A/sqrt(sum(A^2))
B <- kron.inn.prod(Sigma, A)
RB <- rearrange(B,n1)
U = svd(Rsigma)$u
V = svd(Rsigma)$v
S = svd(Rsigma)$d
sig = matrix(0,ncol=n1*n2*n3,nrow=n1*n2*n3)
for (i in c(1:n3^2)){
sig = sig + S[i] * kronecker(matrix(V[,i], ncol=n1*n2), matrix(U[,i], ncol=n3))
}
sum((Sigma - sig)^2)
Btest = matrix(0,ncol=n3^2,nrow=n3^2)
for (i in c(1:n3^2)){
Btest = Btest + S[i] * sum(diag(matrix(U[,i], ncol=n3)%*%t(A))) * matrix(V[,i], ncol=n1*n2)
}
sum((B - Btest)^2)
n1=5
n2=5
n3=5
n=n1*n2*n3
Q=matrix(rnorm(n^2),nrow=n)
Q=svd(Q)
## Sigma=Q$u%*%diag(1+1*runif(n))%*%t(Q$v)
Sigma=Q$u%*%diag(1+10*runif(n))%*%t(Q$u)
Rsigma = rearrange(Sigma,n1*n2)
A <- matrix(rnorm(n3^2), ncol=n3)
A <- A/sqrt(sum(A^2))
B <- kron.inn.prod(Sigma, A)
RB <- rearrange(B,n1)
U = svd(Rsigma)$u
V = svd(Rsigma)$v
S = svd(Rsigma)$d
sig = matrix(0,ncol=n1*n2*n3,nrow=n1*n2*n3)
for (i in c(1:n3^2)){
sig = sig + S[i] * kronecker(matrix(V[,i], ncol=n1*n2), matrix(U[,i], ncol=n3))
}
sum((Sigma - sig)^2)
Btest = matrix(0,ncol=n3^2,nrow=n3^2)
for (i in c(1:n3^2)){
Btest = Btest + S[i] * sum(diag(matrix(U[,i], ncol=n3)%*%t(A))) * matrix(V[,i], ncol=n1*n2)
}
sum((B - Btest)^2)
n1=5
n2=5
n3=5
n=n1*n2*n3
Q=matrix(rnorm(n^2),nrow=n)
Q=svd(Q)
## Sigma=Q$u%*%diag(1+1*runif(n))%*%t(Q$v)
Sigma=Q$u%*%diag(1+10*runif(n))%*%t(Q$u)
Rsigma = rearrange(Sigma,n1*n2)
A <- matrix(rnorm(n3^2), ncol=n3)
A <- A/sqrt(sum(A^2))
B <- kron.inn.prod(Sigma, A)
RB <- rearrange(B,n1)
U = svd(Rsigma)$u
V = svd(Rsigma)$v
S = svd(Rsigma)$d
sig = matrix(0,ncol=n1*n2*n3,nrow=n1*n2*n3)
for (i in c(1:n3^2)){
sig = sig + S[i] * kronecker(matrix(V[,i], ncol=n1*n2), matrix(U[,i], ncol=n3))
}
sum((Sigma - sig)^2)
Btest = matrix(0,ncol=n3^2,nrow=n3^2)
for (i in c(1:n3^2)){
Btest = Btest + S[i] * sum(diag(matrix(U[,i], ncol=n3)%*%t(A))) * matrix(V[,i], ncol=n1*n2)
}
sum((B - Btest)^2)
n1=5
n2=5
n3=5
n=n1*n2*n3
Q=matrix(rnorm(n^2),nrow=n)
Q=svd(Q)
## Sigma=Q$u%*%diag(1+1*runif(n))%*%t(Q$v)
Sigma=Q$u%*%diag(1+10*runif(n))%*%t(Q$u)
Rsigma = rearrange(Sigma,n1*n2)
A <- matrix(rnorm(n3^2), ncol=n3)
A <- A/sqrt(sum(A^2))
B <- kron.inn.prod(Sigma, A)
RB <- rearrange(B,n1)
U = svd(Rsigma)$u
V = svd(Rsigma)$v
S = svd(Rsigma)$d
sig = matrix(0,ncol=n1*n2*n3,nrow=n1*n2*n3)
for (i in c(1:n3^2)){
sig = sig + S[i] * kronecker(matrix(V[,i], ncol=n1*n2), matrix(U[,i], ncol=n3))
}
sum((Sigma - sig)^2)
Btest = matrix(0,ncol=n3^2,nrow=n3^2)
for (i in c(1:n3^2)){
Btest = Btest + S[i] * sum(diag(matrix(U[,i], ncol=n3)%*%t(A))) * matrix(V[,i], ncol=n1*n2)
}
sum((B - Btest)^2)
n1=5
n2=5
n3=5
n=n1*n2*n3
Q=matrix(rnorm(n^2),nrow=n)
Q=svd(Q)
## Sigma=Q$u%*%diag(1+1*runif(n))%*%t(Q$v)
Sigma=Q$u%*%diag(1+10*runif(n))%*%t(Q$u)
Rsigma = rearrange(Sigma,n1*n2)
A <- matrix(rnorm(n3^2), ncol=n3)
A <- A/sqrt(sum(A^2))
B <- kron.inn.prod(Sigma, A)
RB <- rearrange(B,n1)
U = svd(Rsigma)$u
V = svd(Rsigma)$v
S = svd(Rsigma)$d
sig = matrix(0,ncol=n1*n2*n3,nrow=n1*n2*n3)
for (i in c(1:n3^2)){
sig = sig + S[i] * kronecker(matrix(V[,i], ncol=n1*n2), matrix(U[,i], ncol=n3))
}
sum((Sigma - sig)^2)
Btest = matrix(0,ncol=n3^2,nrow=n3^2)
for (i in c(1:n3^2)){
Btest = Btest + S[i] * sum(diag(matrix(U[,i], ncol=n3)%*%t(A))) * matrix(V[,i], ncol=n1*n2)
}
sum((B - Btest)^2)
n1=5
n2=5
n3=5
n=n1*n2*n3
Q=matrix(rnorm(n^2),nrow=n)
Q=svd(Q)
## Sigma=Q$u%*%diag(1+1*runif(n))%*%t(Q$v)
Sigma=Q$u%*%diag(1+10*runif(n))%*%t(Q$u)
Rsigma = rearrange(Sigma,n1*n2)
A <- matrix(rnorm(n3^2), ncol=n3)
A <- A/sqrt(sum(A^2))
B <- kron.inn.prod(Sigma, A)
RB <- rearrange(B,n1)
U = svd(Rsigma)$u
V = svd(Rsigma)$v
S = svd(Rsigma)$d
sig = matrix(0,ncol=n1*n2*n3,nrow=n1*n2*n3)
for (i in c(1:n3^2)){
sig = sig + S[i] * kronecker(matrix(V[,i], ncol=n1*n2), matrix(U[,i], ncol=n3))
}
sum((Sigma - sig)^2)
Btest = matrix(0,ncol=n3^2,nrow=n3^2)
for (i in c(1:n3^2)){
Btest = Btest + S[i] * sum(diag(matrix(U[,i], ncol=n3)%*%t(A))) * matrix(V[,i], ncol=n1*n2)
}
sum((B - Btest)^2)
n1=4
n2=5
n3=6
n=n1*n2*n3
Q=matrix(rnorm(n^2),nrow=n)
Q=svd(Q)
## Sigma=Q$u%*%diag(1+1*runif(n))%*%t(Q$v)
Sigma=Q$u%*%diag(1+10*runif(n))%*%t(Q$u)
Rsigma = rearrange(Sigma,n1*n2)
A <- matrix(rnorm(n3^2), ncol=n3)
A <- A/sqrt(sum(A^2))
B <- kron.inn.prod(Sigma, A)
RB <- rearrange(B,n1)
U = svd(Rsigma)$u
V = svd(Rsigma)$v
S = svd(Rsigma)$d
sig = matrix(0,ncol=n1*n2*n3,nrow=n1*n2*n3)
for (i in c(1:n3^2)){
sig = sig + S[i] * kronecker(matrix(V[,i], ncol=n1*n2), matrix(U[,i], ncol=n3))
}
sum((Sigma - sig)^2)
Btest = matrix(0,ncol=n3^2,nrow=n3^2)
for (i in c(1:n3^2)){
Btest = Btest + S[i] * sum(diag(matrix(U[,i], ncol=n3)%*%t(A))) * matrix(V[,i], ncol=n1*n2)
}
sum((B - Btest)^2)
Btest = matrix(0,ncol=n1*n2,nrow=n1*n2)
for (i in c(1:n3^2)){
Btest = Btest + S[i] * sum(diag(matrix(U[,i], ncol=n3)%*%t(A))) * matrix(V[,i], ncol=n1*n2)
}
sum((B - Btest)^2)
n1=4
n2=5
n3=6
n=n1*n2*n3
Q=matrix(rnorm(n^2),nrow=n)
Q=svd(Q)
## Sigma=Q$u%*%diag(1+1*runif(n))%*%t(Q$v)
Sigma=Q$u%*%diag(1+10*runif(n))%*%t(Q$u)
Rsigma = rearrange(Sigma,n1*n2)
A <- matrix(rnorm(n3^2), ncol=n3)
A <- A/sqrt(sum(A^2))
B <- kron.inn.prod(Sigma, A)
RB <- rearrange(B,n1)
U = svd(Rsigma)$u
V = svd(Rsigma)$v
S = svd(Rsigma)$d
sig = matrix(0,ncol=n1*n2*n3,nrow=n1*n2*n3)
for (i in c(1:n3^2)){
sig = sig + S[i] * kronecker(matrix(V[,i], ncol=n1*n2), matrix(U[,i], ncol=n3))
}
sum((Sigma - sig)^2)
Btest = matrix(0,ncol=n1*n2,nrow=n1*n2)
for (i in c(1:n3^2)){
Btest = Btest + S[i] * sum(diag(matrix(U[,i], ncol=n3)%*%t(A))) * matrix(V[,i], ncol=n1*n2)
}
sum((B - Btest)^2)
n1=4
n2=5
n3=6
n=n1*n2*n3
Q=matrix(rnorm(n^2),nrow=n)
Q=svd(Q)
## Sigma=Q$u%*%diag(1+1*runif(n))%*%t(Q$v)
Sigma=Q$u%*%diag(1+10*runif(n))%*%t(Q$u)
Rsigma = rearrange(Sigma,n1*n2)
A <- matrix(rnorm(n3^2), ncol=n3)
A <- A/sqrt(sum(A^2))
B <- kron.inn.prod(Sigma, A)
RB <- rearrange(B,n1)
U = svd(Rsigma)$u
V = svd(Rsigma)$v
S = svd(Rsigma)$d
sig = matrix(0,ncol=n1*n2*n3,nrow=n1*n2*n3)
for (i in c(1:n3^2)){
sig = sig + S[i] * kronecker(matrix(V[,i], ncol=n1*n2), matrix(U[,i], ncol=n3))
}
sum((Sigma - sig)^2)
Btest = matrix(0,ncol=n1*n2,nrow=n1*n2)
for (i in c(1:n3^2)){
Btest = Btest + S[i] * sum(diag(matrix(U[,i], ncol=n3)%*%t(A))) * matrix(V[,i], ncol=n1*n2)
}
sum((B - Btest)^2)
n1=4
n2=4
n3=4
n=n1*n2*n3
Q=matrix(rnorm(n^2),nrow=n)
Q=svd(Q)
## Sigma=Q$u%*%diag(1+1*runif(n))%*%t(Q$v)
Sigma=Q$u%*%diag(1+10*runif(n))%*%t(Q$u)
Rsigma = rearrange(Sigma,n1*n2)
A <- matrix(rnorm(n3^2), ncol=n3)
A <- A/sqrt(sum(A^2))
B <- kron.inn.prod(Sigma, A)
RB <- rearrange(B,n1)
U = svd(Rsigma)$u
V = svd(Rsigma)$v
S = svd(Rsigma)$d
sig = matrix(0,ncol=n1*n2*n3,nrow=n1*n2*n3)
for (i in c(1:n3^2)){
sig = sig + S[i] * kronecker(matrix(V[,i], ncol=n1*n2), matrix(U[,i], ncol=n3))
}
sum((Sigma - sig)^2)
Btest = matrix(0,ncol=n1*n2,nrow=n1*n2)
for (i in c(1:n3^2)){
Btest = Btest + S[i] * sum(diag(matrix(U[,i], ncol=n3)%*%t(A))) * matrix(V[,i], ncol=n1*n2)
}
sum((B - Btest)^2)
n1=3
n2=3
n3=3
n=n1*n2*n3
Q=matrix(rnorm(n^2),nrow=n)
Q=svd(Q)
## Sigma=Q$u%*%diag(1+1*runif(n))%*%t(Q$v)
Sigma=Q$u%*%diag(1+10*runif(n))%*%t(Q$u)
Rsigma = rearrange(Sigma,n1*n2)
A <- matrix(rnorm(n3^2), ncol=n3)
A <- A/sqrt(sum(A^2))
B <- kron.inn.prod(Sigma, A)
RB <- rearrange(B,n1)
U = svd(Rsigma)$u
V = svd(Rsigma)$v
S = svd(Rsigma)$d
sig = matrix(0,ncol=n1*n2*n3,nrow=n1*n2*n3)
for (i in c(1:n3^2)){
sig = sig + S[i] * kronecker(matrix(V[,i], ncol=n1*n2), matrix(U[,i], ncol=n3))
}
sum((Sigma - sig)^2)
Btest = matrix(0,ncol=n1*n2,nrow=n1*n2)
for (i in c(1:n3^2)){
Btest = Btest + S[i] * sum(diag(matrix(U[,i], ncol=n3)%*%t(A))) * matrix(V[,i], ncol=n1*n2)
}
sum((B - Btest)^2)
RBtest = matrix(0,ncol=n1*n2,nrow=n1*n2)
for (i in c(1:n3^2)){
RBtest = RBtest + S[i] * sum(diag(matrix(U[,i], ncol=n3)%*%t(A))) * rearrange(matrix(V[,i], ncol=n1*n2), n1)
}
sum((RB - RBtest)^2)
rearrange(matrix(V[,1], ncol=n1*n2), n1)$d
svd(rearrange(matrix(V[,1], ncol=n1*n2), n1))$d
svd(rearrange(matrix(V[,2], ncol=n1*n2), n1))$d
svd(rearrange(matrix(V[,3], ncol=n1*n2), n1))$d
svd(RBtest)$d
svd(rearrange(matrix(V[,1], ncol=n1*n2), n1))$u
svd(rearrange(matrix(V[,2], ncol=n1*n2), n1))$u
svd(rearrange(matrix(V[,3], ncol=n1*n2), n1))$u
svd(rearrange(matrix(V[,1], ncol=n1*n2), n1))$u[,1] %*% t(svd(rearrange(matrix(V[,2], ncol=n1*n2), n1))$u[,2])
t(svd(rearrange(matrix(V[,1], ncol=n1*n2), n1))$u[,1]) %*% svd(rearrange(matrix(V[,2], ncol=n1*n2), n1))$u[,2]
t(svd(rearrange(matrix(V[,1], ncol=n1*n2), n1))$u[,1]) %*% svd(rearrange(matrix(V[,2], ncol=n1*n2), n1))$u[,1]
t(svd(rearrange(matrix(V[,1], ncol=n1*n2), n1))$u[,1]) %*% svd(rearrange(matrix(V[,2], ncol=n1*n2), n1))$u[,3]
t(svd(rearrange(matrix(V[,1], ncol=n1*n2), n1))$u[,1]) %*% svd(rearrange(matrix(V[,2], ncol=n1*n2), n1))$u[,4]
t(svd(rearrange(matrix(V[,1], ncol=n1*n2), n1))$u[,1]) %*% svd(rearrange(matrix(V[,2], ncol=n1*n2), n1))$u[,5]
t(svd(rearrange(matrix(V[,1], ncol=n1*n2), n1))$u[,1]) %*% svd(rearrange(matrix(V[,2], ncol=n1*n2), n1))$u[,6]
t(svd(rearrange(matrix(V[,1], ncol=n1*n2), n1))$u[,1]) %*% svd(rearrange(matrix(V[,2], ncol=n1*n2), n1))$u[,7]
svd(rearrange(matrix(V[,1], ncol=n1*n2), n1))$d
svd(rearrange(matrix(V[,2], ncol=n1*n2), n1))$d
svd(rearrange(matrix(V[,1], ncol=n1*n2), n1) + rearrange(matrix(V[,2], ncol=n1*n2), n1))$d
t(svd(rearrange(matrix(V[,1], ncol=n1*n2), n1))$u[,1]) %*% svd(rearrange(matrix(V[,2], ncol=n1*n2), n1))$u[,1]
t(svd(rearrange(matrix(V[,1], ncol=n1*n2), n1))$u[,1]) %*% svd(rearrange(matrix(V[,3], ncol=n1*n2), n1))$u[,1]
t(svd(rearrange(matrix(V[,2], ncol=n1*n2), n1))$u[,1]) %*% svd(rearrange(matrix(V[,3], ncol=n1*n2), n1))$u[,1]
t(svd(rearrange(matrix(V[,3], ncol=n1*n2), n1))$u[,1]) %*% svd(rearrange(matrix(V[,4], ncol=n1*n2), n1))$u[,1]
devtools::document()
devtools::build_manual()
R CMD check
devtools::check()
?zeros
?zeroes
dim(3,3,3)
zeros(prod(dim))
dim(pracma::zeros(prod(dim)))
dim
dim = c(3,3,3)
dim(pracma::zeros(prod(dim)))
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::build_manual()
devtools::load_all()
devtools::document()
devtools::build_manual()
devtools::check()
devtools::load_all()
devtools::document()
devtools::document()
devtools::build_manual()
devtools::check()
devtools::load_all()
devtools::document()
devtools::document()
devtools::build_manual()
devtools::check()
dim <- c(2,2,2)
xx <- tenAR.sim(t=100, dim,R=2,P=1,rho=0.5, cov='iid')
est <- tenAR.est(xx, R=2, P=1, method="LSE")
if (!(mode(xx) == "S4")) {xx <- as.tensor(xx)}
R=2
P=1
niter=150
tol=1e-5
print.true = FALSE
if (!(mode(xx) == "S4")) {xx <- as.tensor(xx)}
dim <- dim(xx)[-1]
K <- length(dim)
t <- dim(xx)[1]
if (K==2){
if (is.null(init.A)) {
A.old = list()
for (p in c(1:P)){
if (is.na(R[p])) stop("p != length(R)")
if (R[p] == 0) next
A.old[[p]] <- lapply(1:R[p], function(j) {lapply(1:K, function(i) {0.5*diag(dim[i])})})
}
} else {A.old <- init.A}
}
if (K==3) {if (is.null(init.A)) {A.old <- tenAR.PROJ(xx@data,R,P)$A} else {A.old <- init.A}}
A.new <- A.old
Tol <- tol*sqrt(sum(dim^2))*sum(R)
init.A=NULL
if (K==2){
if (is.null(init.A)) {
A.old = list()
for (p in c(1:P)){
if (is.na(R[p])) stop("p != length(R)")
if (R[p] == 0) next
A.old[[p]] <- lapply(1:R[p], function(j) {lapply(1:K, function(i) {0.5*diag(dim[i])})})
}
} else {A.old <- init.A}
}
if (K==3) {if (is.null(init.A)) {A.old <- tenAR.PROJ(xx@data,R,P)$A} else {A.old <- init.A}}
A.new <- A.old
Tol <- tol*sqrt(sum(dim^2))*sum(R)
dis <- 1
iiter <- 1
while(iiter <= niter & dis >= tol){
dis3 <- 0
for (p in c(1:P)){
if (R[p] == 0) next
# print(p)
for (r in c(1:R[p])){
# print(r)
for (k in c(K:1)){ # update last matrix first
# print(k)
# tic("step 1")
# temp <- tl(xx, A.new[[p]][[r]][-k], k)[(1+P-p):(t-p),,,,drop=FALSE]
temp <- rTensor::ttl(xx, A.new[[p]][[r]][-k], c(2:(K+1))[-k])
temp <- myslice(temp,K,1+P-p,t-p)
L1 <- 0
# toc()
# tic("step 2")
for (l in c(1:P)){
if (R[l] == 0) next
if (l == p){if (R[l] > 1){L1 <- L1 + Reduce("+",lapply(c(1:R[l])[-r], function(n) {rTensor::ttl(myslice(xx, K, 1+P-l, t-l), A.new[[l]][[n]], (c(1:K) + 1))}))}
} else {L1 <- L1 + Reduce("+",lapply(c(1:R[l]), function(n) {rTensor::ttl(myslice(xx, K, 1+P-l, t-l), A.new[[l]][[n]], (c(1:K) + 1))}))}
}
temp2 <- myslice(xx, K, 1+P, t) - L1
# toc()
# tic("step 3")
RR <- tensor(temp@data,temp@data,c(1:(K+1))[-(k+1)],c(1:(K+1))[-(k+1)])
# toc()
# tic("step 4")
LL <- tensor(temp2@data,temp@data,c(1:(K+1))[-(k+1)],c(1:(K+1))[-(k+1)])
# toc()
# tic("step 5")
A.new[[p]][[r]][[k]] <- LL %*% ginv(RR)
# toc()
dis3 <- dis3 + min(sum((A.new[[p]][[r]][[k]] - A.old[[p]][[r]][[k]])^2), sum((-A.new[[p]][[r]][[k]] - A.old[[p]][[r]][[k]])^2))
}
}
}
# print("done once")
# tic("svd")
for (p in c(1:P)){
if (R[p] == 0) next
A.new[[p]] <- svd.rescale(A.new[[p]])
}
# toc()
dis <- sqrt(dis3)
A.old <- A.new
iiter <- iiter + 1
if (print.true == TRUE){
print(dis)
print(paste('iiter num=',iiter))
}
}
for (p in c(1:P)){
if (R[p] == 0) next
A.new[[p]] <- fro.order(fro.rescale(A.new[[p]]))
}
res <- ten.res(xx,A.new,P,R,K,t)@data
devtools::load_all()
devtools::document()
devtools::build_manual()
devtools::check()
devtools::load_all()
devtools::document()
devtools::document()
devtools::build_manual()
devtools::check()
devtools::build()
cran_incoming()
library(foghorn)
install.packages("foghorn")
install.packages("foghorn")
install.packages("foghorn")
install.package("foghorn")
install.pakages("foghorn")
install.packages(foghorn)
install.packages("foghorn")
library(foghorn)
cran_incoming()
cran_incoming(pkg="tensorTS")
print(cran_incoming(pkg="tensorTS"))
cran_incoming()
ans = cran_incoming()
View(ans)
View(ans)
library(tensorTS)
update.packages("tensorTS")
version.packages("tensorTS")
library(tensorTS)
devtools::load_all()
devtools::document()
devtools::build_manual()
devtools::check()
devtools::build()
devtools::load_all()
devtools::document()
devtools::build_manual()
devtools::build()
devtools::load_all()
devtools::document()
devtools::check()
devtools::build()
devtools::load_all()
devtools::document()
devtools::document()
devtools::build()
devtools::load_all()
devtools::document()
devtools::build()
devtools::load_all()
devtools::document()
devtools::build()
